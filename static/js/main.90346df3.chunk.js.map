{"version":3,"sources":["logo.svg","Component/PostList.js","Component/PostForm.js","HooksComponent/NouseEffect.js","HooksComponent/ClassMouse.js","Component/IntervalClass.js","HooksComponent/Performance/Title.js","HooksComponent/Performance/Count.js","HooksComponent/Performance/Button.js","HooksComponent/ClassTimer.js","HooksComponent/CustomHooks/useDocTitle.js","HooksComponent/CustomHooks/DocTitle.js","HooksComponent/CustomHooks/DoctTitletwo.js","HooksComponent/CustomHooks/useCounter.js","HooksComponent/CustomHooks/Counterone.js","HooksComponent/CustomHooks/Countertwo.js","HooksComponent/CustomHooks/useInput.js","HooksComponent/CustomHooks/InputForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Component","React","memo","console","log","text","count","handleClick","children","onClick","useDocTitle","useEffect","document","title","DocTitle","useState","setCount","DocTitletwo","useCounter","initialState","value","increment","decrement","reset","Counterone","Countertwo","useInput","initialvalue","setValue","onChange","e","target","InputForm","firstname","bindFirstname","resetFirstname","lastname","bindLastname","restLastname","onSubmit","preventDefault","alert","type","reducer","createContext","state","action","App","useReducer","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.90346df3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\n\r\nexport class PostList extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            posts: [],\r\n            errormessage: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('https://jsonplaceholder.typicode.com/posts')\r\n            .then(respone => {\r\n                console.log(respone)\r\n                this.setState({ posts: respone.data })\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                this.setState({ errormessage: 'error retrieving data' })\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { posts, errormessage } = this.state\r\n        return (\r\n\r\n            < div >\r\n                List of postssss\r\n\r\n                {\r\n                    posts.length ?\r\n                        posts.map(post => <div key={post.id}>{post.title}</div>) : null\r\n                }\r\n                {\r\n                    errormessage ? <div>{errormessage}</div> : null\r\n                }\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default PostList\r\n","import React, { Component } from 'react'\r\nimport Axios from 'axios'\r\n\r\nexport class PostForm extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            userId: '',\r\n            title: '',\r\n            body: ''\r\n        }\r\n    }\r\n\r\n    changeHandler = (e) => {\r\n        this.setState({\r\n            [e.target.name]: [e.target.value]\r\n        })\r\n    }\r\n    submitHandler = (e) => {\r\n        e.preventDefault()\r\n        console.log(this.state)\r\n        Axios.post('https://jsonplaceholder.typicode.com/posts', this.state)\r\n            .then(response => {\r\n                console.log(response)\r\n            })\r\n            .catch(error => {\r\n                console.log('Error')\r\n            })\r\n    }\r\n\r\n\r\n    render() {\r\n        const { userId, title, body } = this.state\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.submitHandler}>\r\n                    <div>\r\n                        <input type='text' name='userId' value={userId} onChange={this.changeHandler}></input>\r\n                    </div>\r\n                    <div>\r\n                        <input type='text' name='title' value={title} onChange={this.changeHandler}></input>\r\n                    </div>\r\n                    <div>\r\n                        <input type='text' name='body' value={body} onChange={this.changeHandler}></input>\r\n                    </div>\r\n                    <div>\r\n                        <button type='submit'>Submit</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PostForm\r\n","import React, { Component } from 'react'\r\n\r\nexport class NouseEffect extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            count: 0,\r\n            name: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = `Clicked ${this.state.count} times`\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n\r\n        if (prevState.count !== this.state.count) {\r\n            console.log('Updating Document title')\r\n            document.title = `Clicked ${this.state.count} times`\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input type='text' value={this.state.name} onChange={e => {\r\n                    this.setState({ name: e.target.value })\r\n                }}></input>\r\n                <button onClick={() => this.setState({ count: this.state.count + 1 })}>Clicked {this.state.count} times</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NouseEffect\r\n","import React, { Component } from 'react'\r\nimport { CountContext } from '../App'\r\n\r\nexport class ClassMouse extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            x: 0,\r\n            y: 0\r\n        }\r\n    }\r\n\r\n\r\n    logMouseposition = e => {\r\n        console.log('Mouse event called')\r\n        this.setState({\r\n            x: e.clientX,\r\n            y: e.clientY\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('Called')\r\n        window.addEventListener('mousemove', this.logMouseposition)\r\n    }\r\n\r\n    componentWillMount() {\r\n        console.log('Component uunmounting')\r\n        window.removeEventListener('mousemove', this.logMouseposition)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                X position - {this.state.x}, Y Position - {this.state.y}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ClassMouse\r\n","import React, { Component } from 'react'\r\n\r\nexport class IntervalClass extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.interval = setInterval(this.tick, 1)\r\n    }\r\n    tick = () => {\r\n        this.setState({\r\n            count: this.state.count + 1\r\n        })\r\n    }\r\n\r\n    componentWillMount() {\r\n        clearInterval(this.interval)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.count}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default IntervalClass\r\n","import React from 'react'\r\n\r\nfunction Title() {\r\n    console.log('Rendering Title')\r\n    return (\r\n        <div>\r\n            <h2>Callback Hook</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(Title)\r\n","import React from 'react'\r\n\r\nfunction Count({ text, count }) {\r\n    console.log(`Rendering text${text}`)\r\n    return (\r\n        <div>\r\n            {text} - {count}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(Count)\r\n","import React from 'react'\r\n\r\nfunction Button({ handleClick, children }) {\r\n    console.log('Rendering button - ', children)\r\n    return (\r\n        <div>\r\n            <button onClick={handleClick}>{children}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(Button)\r\n","import React, { Component } from 'react'\r\n\r\nexport class ClassTimer extends Component {\r\n\r\n    interval\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            timer: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.interval = setInterval(() => {\r\n            this.setState(prevState => ({ timer: prevState.timer + 1 }))\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Class Timer - {this.state.timer}\r\n                <button onClick={() => clearInterval(this.interval)}>Clear Class Timer</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ClassTimer\r\n","import { useEffect } from 'react'\r\n\r\nfunction useDocTitle(count) {\r\n    useEffect(() => {\r\n        document.title = `Count - ${count}`\r\n    }, [count])\r\n\r\n}\r\n\r\nexport default useDocTitle\r\n","import React, { useState, useEffect } from 'react'\r\nimport Count from '../Performance/Count'\r\nimport useDocTitle from './useDocTitle'\r\n\r\nfunction DocTitle() {\r\n\r\n    const [count, setCount] = useState(0)\r\n\r\n    useDocTitle(count)\r\n    return (\r\n        <div>\r\n            <button onClick={() => setCount(count + 1)}>Count - {count}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DocTitle\r\n","import React, { useState, useEffect } from 'react'\r\nimport Count from '../Performance/Count'\r\nimport useDocTitle from './useDocTitle'\r\n\r\nfunction DocTitletwo() {\r\n\r\n    const [count, setCount] = useState(0)\r\n\r\n    useDocTitle(count)\r\n    return (\r\n        <div>\r\n            <button onClick={() => setCount(count + 1)}>Count - {count}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DocTitletwo\r\n","import { useState } from 'react'\r\n\r\nfunction useCounter(initialState = 10, value) {\r\n\r\n    const [count, setCount] = useState(initialState)\r\n\r\n    const increment = () => {\r\n        setCount(count + value)\r\n    }\r\n\r\n    const decrement = () => {\r\n        setCount(count - value)\r\n    }\r\n\r\n    const reset = () => {\r\n        setCount(initialState)\r\n    }\r\n    return [count, increment, decrement, reset]\r\n}\r\n\r\nexport default useCounter\r\n","import React, { useState } from 'react'\r\nimport useCounter from './useCounter'\r\n\r\nfunction Counterone() {\r\n\r\n    const [count, increment, decrement, reset] = useCounter(10, 5)\r\n\r\n    return (\r\n        <div>\r\n            Counter One - {count}\r\n            <button onClick={increment}>Increment</button>\r\n            <button onClick={decrement}>Decrement</button>\r\n            <button onClick={reset}>Reset</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Counterone\r\n","import React, { useState } from 'react'\r\nimport useCounter from './useCounter'\r\n\r\nfunction Countertwo() {\r\n    const [count, increment, decrement, reset] = useCounter(5, 3)\r\n\r\n    return (\r\n        <div>\r\n            Counter twooog  - {count}\r\n            <button onClick={increment}>Increment</button>\r\n            <button onClick={decrement}>Decrement</button>\r\n            <button onClick={reset}>Reset</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Countertwo\r\n","import { useState } from 'react'\r\n\r\nfunction useInput(initialvalue) {\r\n    const [value, setValue] = useState(initialvalue)\r\n\r\n    const reset = () => {\r\n        setValue(initialvalue)\r\n    }\r\n\r\n    const bind = {\r\n        value,\r\n        onChange: e => {\r\n            setValue(e.target.value)\r\n        }\r\n    }\r\n\r\n    return [value, bind, reset]\r\n\r\n}\r\n\r\nexport default useInput\r\n","import React, { useState } from 'react'\r\nimport useInput from './useInput'\r\n\r\nfunction InputForm() {\r\n\r\n\r\n    const [firstname, bindFirstname, resetFirstname] = useInput('')\r\n    const [lastname, bindLastname, restLastname] = useInput('')\r\n\r\n    const Submithandler = e => {\r\n        e.preventDefault()\r\n        alert(`Hello ${firstname} ${lastname}`)\r\n        resetFirstname()\r\n        restLastname()\r\n    }\r\n    return (\r\n        <div>\r\n            <form onSubmit={Submithandler}>\r\n                <label>First Name</label>\r\n                <input {...bindFirstname}></input>\r\n                <label>Last name</label>\r\n                <input {...bindLastname}></input>\r\n                <button type='submit'>Submit</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputForm\r\n","import React, { useEffect, useReducer, useMemo } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PostList from './Component/PostList'\nimport PostForm from './Component/PostForm';\nimport CounterHook from './HooksComponent/CounterHook';\nimport HooksObject from './HooksComponent/HooksObject';\nimport HooksArray from './HooksComponent/HooksArray';\nimport NouseEffect from './HooksComponent/NouseEffect';\nimport UseEffect from './HooksComponent/HooksuseEffect';\nimport ClassMouse from './HooksComponent/ClassMouse';\nimport HookMouse from './HooksComponent/HookMouse';\nimport UseeffectCleanup from './HooksComponent/UseeffectCleanup';\nimport IntervalClass from './Component/IntervalClass';\nimport UseeffectDependency from './HooksComponent/UseeffectDependency';\nimport DataFetching from './HooksComponent/DataFetching';\nimport ComponentE from './Component/ComponentE';\n\nimport UseReducer from './HooksComponent/UseReducer';\nimport UseReducertwo from './HooksComponent/UseReducertwo';\nimport ComponentF from './HooksComponent/GlobalTest/ComponentF';\nimport ComponentA from './HooksComponent/GlobalTest/ComponentA';\nimport ComponentD from './HooksComponent/GlobalTest/ComponentD';\nimport DataFetchingone from './HooksComponent/DataFetchingone';\nimport DataFetchingtwo from './HooksComponent/DataFetchingtwo';\nimport ParentComp from './HooksComponent/Performance/ParentComp';\nimport Usememo from './HooksComponent/Performance/Usememo';\nimport FocusInput from './HooksComponent/FocusInput';\nimport ClassTimer from './HooksComponent/ClassTimer';\nimport HookTimer from './HooksComponent/HookTimer';\nimport DocTitle from './HooksComponent/CustomHooks/DocTitle';\nimport DocTitletwo from './HooksComponent/CustomHooks/DoctTitletwo';\nimport Counterone from './HooksComponent/CustomHooks/Counterone';\nimport Countertwo from './HooksComponent/CustomHooks/Countertwo';\nimport InputForm from './HooksComponent/CustomHooks/InputForm';\n\nexport const UserContext = React.createContext()\nexport const ChannelContext = React.createContext()\nexport const CountContext = React.createContext()\nconst InitialState = 10;\nconst reducer = (state, action) => {\n  switch (action) {\n    case 'increment':\n      {\n        return state + 1\n      }\n    case 'decrement':\n      {\n        return state - 1\n      }\n    case 'reset':\n      {\n        return InitialState\n      }\n    default:\n      {\n        return state\n      }\n\n  }\n}\n\nfunction App() {\n  const [Count, dispatch] = useReducer(reducer, InitialState)\n  return (\n    <div className=\"App\">\n      {/*<PostList />*/}\n      {/*<PostForm />\n      <CounterHook />\n      <HooksObject />\n      <HooksArray />\n      <NouseEffect />\n      <UseEffect />\n      <ClassMouse />\n      <HookMouse />\n      <UseeffectCleanup />\n      <IntervalClass />\n      <UseeffectDependency />\n      <DataFetching />\n\n      <UserContext.Provider value={'Susee'}>\n        <ChannelContext.Provider value={'react'}>\n          <ComponentE />\n        </ChannelContext.Provider>\n      </UserContext.Provider>\n      <UserContext.Provider value={'Susee'}>\n        <ChannelContext.Provider value={'react'}>\n          <ComponentD />\n        </ChannelContext.Provider>\n      </UserContext.Provider>\n      <UseReducer />\n      <UseReducertwo />\n      <CountContext.Provider value={{ countState: Count, countDispatch: dispatch }}>\n        Count - {Count}\n        <ComponentD />\n        <ComponentF />\n        <ComponentA />\n      </CountContext.Provider>\n\n\n      <DataFetchingtwo />\n      <HooksArray /> \n      <ParentComp />\n      <Usememo />\n      <FocusInput />\n      <ClassTimer />\n      <HookTimer /> */}\n      <DocTitle />\n      <DocTitletwo />\n      <Counterone />\n      <Countertwo />\n      <InputForm />\n\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}